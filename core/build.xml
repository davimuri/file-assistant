<?xml version="1.0"?>
<project name="file-assistant" default="list" basedir=".">

    <!-- http://ant-contrib.sourceforge.net/ -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

    <property file="build.properties"/>
    <property name="fa.core.jar" value="target/core-1.0-SNAPSHOT-jar-with-dependencies.jar"/>
    <property name="fa.zipsrc.backup.dir" value="zip-sources" />
    <property name="fa.git.backup.dir" value="git-backup" />
    <property name="fa.git.bundle.ext" value="gitbundle" />

    <target name="init">
        <defaultexcludes remove="**/.svn/**"/>
        <tstamp>
            <format property="fa.timestamp" pattern="yyyy-MM-dd-HHmmss" locale="en,GB"/>
        </tstamp>
        <tempfile property="fa.log.file" destdir="${fa.working.dir}" prefix="fa_" suffix="_${fa.timestamp}.log"/>
        <fileset id="fa.fileset" dir="${fa.path.to.browse}" >
            <include name="${fa.pattern.to.include}"/>
            <exclude name="${fa.pattern.to.exclude}"/>
        </fileset>
        <mkdir dir="${fa.working.dir}" />
    </target>
    <target name="clean" description="Clean working directory">
        <delete dir="${fa.working.dir}" />
    </target>
    <target name="list" depends="init">
        <property name="list.fileset.prop" refid="fa.fileset"/>
        <property name="list.result.file" value="fa_list_${fa.timestamp}.txt"/>
        <echo message="${list.fileset.prop}" file="${list.result.file}"/>
        <!--replace file="${list.result.file}" token=";" value="\n"/-->
    </target>
    <target name="list-duplicated-files" depends="init">
            <java jar="${fa.core.jar}" fork="true">
                <arg value="-df"/>
                <arg value="${fa.path.to.browse}"/>
                <arg value="*.{doc,docx,xls,xlsx,pdf,ppt,pptx,jpg}"/>
            </java>
    </target>
    <target name="delete" depends="init">
        <delete includeemptydirs="true">
            <fileset refid="fa.fileset"/>
        </delete>
    </target>

    <target name="zip-src-subdirs" description="Given a parent file, generates zip file for each subdir"
            depends="init">
        <foreach target="zip-src" param="fa.zipsrc.dir" inheritall="false">
            <path>
                <dirset dir="${fa.zipsrc.parent.dir}">
                    <include name="*" />
                </dirset>
            </path>
        </foreach>
    </target>

    <target name="zip-src" depends="init">
        <!--copy preservelastmodified="true" todir="${basedir}/temp">
            <fileset dir="${fa.zipsrc.dir}">
                <exclude name="**/.svn/"/>
                <exclude name="**/.git/"/>
                <exclude name="**/target/"/>
                <exclude name="**/.idea/"/>
                <exclude name="**/.metadata/"/>
                <exclude name="**/.classpath"/>
                <exclude name="**/.project"/>
                <exclude name="**/.settings/"/>
                <exclude name="**/.DS_Store"/>
                <exclude name="**/*.class"/>
                <exclude name="**/*.log"/>
            </fileset>
        </copy-->
        <basename property="zip.file" file="${fa.zipsrc.dir}"/>
        <zip destfile="${fa.working.dir}/${fa.zipsrc.backup.dir}/${zip.file}.zip">
            <fileset dir="${fa.zipsrc.dir}">
                <exclude name="**/.svn/"/>
                <exclude name="**/.git/"/>
                <exclude name="**/.gitattributes"/>
                <exclude name="**/.gitignore"/>
                <exclude name="**/.idea/"/>
                <exclude name="**/*.iml"/>
                <exclude name="**/.metadata/"/>
                <exclude name="**/.classpath"/>
                <exclude name="**/.project"/>
                <exclude name="**/.settings/"/>
                <exclude name="**/target/"/>
                <exclude name="**/*.class"/>
                <exclude name="**/*.log"/>
                <exclude name="**/.DS_Store"/>
            </fileset>
        </zip>
    </target>

    <target name="git-zip-subdirs" depends="init">
        <foreach target="git-zip" param="fa.git.dir" inheritall="false">
            <path>
                <dirset dir="${fa.git.parent.dir}">
                    <include name="*" />
                </dirset>
            </path>
        </foreach>
    </target>

    <!-- Generates a ZIP of a git repository excluding files/dirs in .gitignore
         Includes the current status of master branch
         Requires git installed
     -->
    <target name="git-zip" depends="init">
        <property name="output.dir" value="${fa.working.dir}/${fa.git.backup.dir}" />
        <mkdir dir="${output.dir}" />
        <basename property="zip.file" file="${fa.git.dir}"/>
        <exec executable="git" dir="${fa.git.dir}">
            <arg value="archive" />
            <arg value="--format" />
            <arg value="zip" />
            <arg value="--output" />
            <arg value="${output.dir}/${zip.file}.zip" />
            <arg value="master" />
        </exec>
    </target>

    <!-- Generates a bundle of a git repository excluding files/dirs in .gitignore
     Includes commit history and branches
     Requires git installed
     -->
    <target name="git-bundle" depends="init">
        <property name="output.dir" value="${fa.working.dir}/${fa.git.backup.dir}" />
        <mkdir dir="${output.dir}" />
        <basename property="zip.file" file="${fa.git.dir}"/>
        <exec executable="git" dir="${fa.git.dir}">
            <arg value="bundle" />
            <arg value="create" />
            <arg value="${output.dir}/${zip.file}.${fa.git.bundle.ext}" />
            <arg value="--all" />
        </exec>
    </target>

    <!-- Create a git repository with a git bundle -->
    <target name="git-bundle-extract" depends="init">
        <basename property="repo.name" file="${fa.git.bundle.extract.file}" suffix=".${fa.git.bundle.ext}"/>
        <exec executable="git" dir="${fa.git.bundle.extract.dir}">
            <arg value="clone" />
            <arg value="${fa.git.bundle.extract.file}" />
            <arg value="${repo.name}" />
        </exec>
    </target>

    <!-- Pre-defined tasks -->
    <target name="clean-mac" depends="init">
        <echo message="Deleting svn directories ..." />
        <delete includeemptydirs="true">
            <fileset dir="/Users/davidmurillomatallana/Documents" >
                <include name="**/.svn/"/>
                <exclude name="**/workspaces/"/>
            </fileset>
        </delete>
    </target>

</project>